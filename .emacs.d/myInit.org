#+startup: overview

* default options
** narrow region
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src
** available can upper case hotkey
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
#+end_src
** auto revert buffer
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** customization file
#+begin_src emacs-lisp
  (let ((emacs-custom-path "~/.emacs.d/emacs-custom.el"))
    (when (file-exists-p emacs-custom-path)
      (setq custom-file emacs-custom-path)
      (load custom-file)
      )
    )
#+end_src
** for link
#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
#+end_src
** wiki directory
#+begin_src emacs-lisp
  (setq wiki-directory "~/wiki")
  ;; (when (not (file-exists-p wiki-directory))
  ;;     (make-directory wiki-directory)
  ;;     )
#+end_src
** confirmation when exiting emacs
#+begin_src emacs-lisp
  (setq confirm-kill-emacs #'yes-or-no-p)
#+end_src
** file performance issue
*** avoid performance issue in files with very long lines.
#+begin_src emacs-lisp
  (global-so-long-mode t)
  ;; (setq bidi-inhibit-bpa t)
#+end_src
* options for loading
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

* interface
** hide start screen
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** hide toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** revert buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'revert-buffer)
#+end_src

** subword-mode
e.g.   GtkWindow          =>  "Gtk" and "Window"
#+begin_src emacs-lisp
  (subword-mode t)
#+end_src

** global visual line mode
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** tune off sound bell and use visible bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** delete selection when type
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

** i don't want to make backup file auto
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** default tab size
#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src

** i want to save desktop state for emacs open after
#+begin_src emacs-lisp
  (desktop-save-mode t)
#+end_src

** trail whitespace
#+begin_src emacs-lisp
  (define-minor-mode my:trailing-whitespace-mode
    "Simple minor mode to highlight trailing white spaces."
    :variable show-trailing-whitespace)

  (add-hook 'prog-mode-hook 'my:trailing-whitespace-mode)
#+end_src

* alias
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defalias 'list-buffers 'ibuffer)
#+end_src

* language
** enviroment
#+begin_src emacs-lisp
  (when enable-multibyte-characters
    (set-language-environment "Korean")
    (set-locale-environment "ko_KR.UTF-8")
    )
#+end_src
** encoding
for default encoding is best that utf-8
#+begin_src emacs-lisp
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

* my custom function
** check big file
#+begin_src emacs-lisp
  (defun my-find-fie-check-make-large-file-read-only-hook ()
    "If a file is over a given size, make the buffer read only for speed."
    (when (> (buffer-size) (* 1024 1024))
      (setq buffer-read-only t)
      (buffer-disable-undo)
      (fundamental-mode)
      (display-line-numbers-mode nil)))
#+end_src

*** set when find file
#+begin_src emacs-lisp
  (add-hook 'find-file-hook 'my-find-fie-check-make-large-file-read-only-hook)
#+end_src
** current buffer name
#+begin_src emacs-lisp

  (defun current-buffer-name()
    "get current buffer name."
    (interactive)
    (insert (buffer-name (window-buffer (minibuffer-selected-window))))
    )

  (defun current-buffer-file-name()
    "get current buffer name."
    (interactive)
    (insert (buffer-file-name (window-buffer (minibuffer-selected-window))))
    )

  (global-set-key (kbd "C-c i b n") 'current-buffer-name)
  (global-set-key (kbd "C-c i b p") 'current-buffer-file-name)

#+end_src

* macro

* about package
** first setting for package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)

  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (when (equal emacs-version "27.2")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src

** quelpa
download package from git
#+begin_src emacs-lisp

  (use-package quelpa
    :ensure t
    :config
    (setq quelpa-update-melpa-p nil)
    )

  (use-package quelpa-use-package
    :ensure t
    :config
    (setq quelpa-update-melpa-p nil)
    )

#+end_src

** try
try apply package for temp package that not download
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

** manual elisp path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+end_src

* interface package
** highlight indent  guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook ((prog-mode) . highlight-indent-guides-mode)
    :config
    )
#+end_src
** highlight pair point
#+begin_src emacs-lisp
  (use-package paren
    :ensure t
    :init
    (show-paren-mode t))
#+end_src
** highlight line
#+begin_src emacs-lisp
  (use-package hl-line
    :ensure t
    :init
    (global-hl-line-mode t)
    )
#+end_src
** powerline
customizing mode line
#+begin_src emacs-lisp

  (use-package powerline
    :ensure t
    :config
    (powerline-default-theme)
    )

#+end_src
** display line number
#+begin_src emacs-lisp

  (use-package display-line-numbers
    :ensure t
    ;; :hook ((prog-mode actionscript-mode) . display-line-numbers-mode)
    :config
    ;; (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode t)
    )

#+end_src
** eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :ensure t
    :init
    (setq eyebrowse-keymap-prefix (kbd "C-c w L"))
    :config
    (eyebrowse-mode t)
    )
#+end_src
** rainbow delimiter
in org mode, when `>` character inputed, wrong highlight occur, after lines at `(` or `)` and etc.
#+begin_src emacs-lisp

  ;; (use-package rainbow-delimiters
  ;;   :ensure t
  ;;   :hook ((prog-mode org-mode) . rainbow-delimiters-mode)
  ;;   )

#+end_src
* which key
brings up some help
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1)
    )
#+end_src

* shell
** exec path for shell
when window
#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(ns x))
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-envs '("LANG" "LC_ALL" "LDFLAGS" "CPPFLAGS" "CFLAGS"))
      (message "Initialized PATH and other variables from SHELL.")
      )
    )

#+end_src
** eshell toggle
#+begin_src emacs-lisp

  (use-package eshell-toggle
    :ensure t
    :bind (("C-c o s e" . eshell-toggle))
    :config
    )

#+end_src

* gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t) 
#+end_src

* org-mode stuff
** org
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :ensure org-contrib
    :bind (
           ("C-c o a" . org-agenda)
           ;;        :map org-mode-map
           ;;        ("C-c C-c" . (lambda ()
           ;;                       (interactive)
           ;;                       (org-ctrl-c-ctrl-c)
           ;;                       (org-display-inline-images)))
           )
    :config
    (setq org-hide-emphasis-markers t)
    (setq org-image-actual-width nil)
    (use-package ob-ipython
      :ensure t
      :config
      (advice-add 'ob-ipython--collect-json :before
                  (lambda (&rest args)
                    (when (re-search-forward "{" nil t)
                      (backward-char))))
      )
    (require 'ox-confluence)

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (python . t)
                                   (ipython . t)
                                   (C . t)
                                   (plantuml . t)
                                   (shell . t)
                                   (ditaa . t)
                                   (eshell . t)
                                   (gnuplot . t)
                                   ))


    (defun my:ox-confluence-en--macro (name contents &optional arguments)
      "Build a Confluence wiki macro block.

  Inserts CONTENTS into a macro NAME. ARGUMENTS may be provided as
  an alist."
      (let ((open-tag (concat "\{" name
                              (when arguments
                                (concat ":"
                                        (mapconcat (lambda (pair) (format "%s=%s"
                                                                          (car pair)
                                                                          (cdr pair)))
                                                   arguments
                                                   "|")))
                              "}"))
            (close-tag (concat "{" name "}")))
        (if contents (concat open-tag "\n" contents "\n" close-tag)
          open-tag)))

    (advice-add 'org-confluence--block :before-until
                (lambda (language theme contents)
                  (if (member language '("plantuml" "dot" "ditaa"))
                      (my:ox-confluence-en--macro "plantuml" contents `((type . ,language)))
                    nil)))

    (setq org-plantuml-jar-path
          (if (file-directory-p "~/rc/.emacs.d")
              (expand-file-name "~/rc/.emacs.d/plantuml.jar")
            (expand-file-name "~/.emacs.d/plantuml.jar")))

    (add-to-list 'org-structure-template-alist
                 '("u" . "src plantuml :file .png :exports plantuml"))

    (when (eq system-type 'windows-nt)
      (progn (set-face-attribute 'default nil :family "Consolas")
             (set-face-attribute 'default nil :height 100)
             (set-fontset-font t 'hangul (font-spec :name "NanumBarunGothic"))
             (setq face-font-rescale-alist '(("NanumBarunGothic" . 1.3)))
             )
      )
    (setq org-ditaa-jar-path
          (if (file-directory-p "~/rc/.emacs.d")
              (expand-file-name "~/rc/.emacs.d/ditaa.jar")
            (expand-file-name "~/.emacs.d/ditaa.jar")
            )
          )
    (setq org-todo-keywords
          '((sequencep "TODO" "PROGRESS" "WAITING" "DONE")))
    (add-hook 'org-babel-after-execute-hook
              (lambda ()
                (when org-inline-image-overlays
                  (org-redisplay-inline-images))))
    (setq org-startup-with-inline-images t)
    )
#+end_src
** org bullets
#+begin_src emacs-lisp
  ;; next package's bullet sharp is breaked in solar theme.
  ;; (use-package org-bullets
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;;   )

  ;; therefore use this mode.
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** org confluence
#+begin_src emacs-lisp
  ;; (use-package ox-confluence-en
  ;;   :quelpa (ox-confluence-en :fetcher github :repo "correl/ox-confluence-en")
  ;;   :config
  ;;   (require 'ox-confluence)
  ;;   (setq ox-confluence-en-use-plantuml-macro t)
  ;;   )
#+end_src

** org mode screenshot
#+begin_src emacs-lisp

  ;; window 10 insert screenshot
  (defun my-org-screenshot-w32 ()
    "Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    ;; using just clip board captured before.
    ;; (shell-command "snippingtool /clip")
    (shell-command (concat "powershell -command \"Add-Type -AssemblyName System.Windows.Forms;if ($([System.Windows.Forms.Clipboard]::ContainsImage())) {$image = [System.Windows.Forms.Clipboard]::GetImage();[System.Drawing.Bitmap]$image.Save('" filename "',[System.Drawing.Imaging.ImageFormat]::Png); Write-Output 'clipboard content saved as file'} else {Write-Output 'clipboard does not contain image data'}\""))
    ;; (insert (concat "[[file:" filename "]]"))
    (insert (concat "[[file:" (file-name-nondirectory filename) "]]"))
    (org-display-inline-images)
    )

#+end_src

#+begin_src emacs-lisp

  (use-package org-download
    :ensure t
    :hook (dired-mode . org-download-enable)
    :config
    (cond
     ((eq system-type 'windows-nt)
      (progn
        (setq org-download-screenshot-method "imagemagick/convert")
        (global-set-key (kbd "C-c i s") 'my-org-screenshot-w32)))
     ((eq system-type 'darwin)
      (progn
        (setq-default org-download-heading-lvl nil)
        (setq org-download-screenshot-method "screencapture"))))
    )

#+end_src

** ox reveal
#+begin_src emacs-lisp

  (use-package ox-reveal
    :ensure t
    :config
    (cond
     ((eq system-type 'windows-nt)
      (progn
        (setq org-reveal-root "file:///c:/Users/myjung/reveal.js")))
     ((eq system-type 'darwin)
      (progn
        (setq org-reveal-root "file:///Users/kino811/reveal.js"))))
    )

#+end_src

** org insert inline image from url
#+begin_src emacs-lisp
  (defun my-org-replace-tag-file-to-confluence-file ()
    (interactive)
    (query-replace-regexp "\\[file:[^\]]*?\\([^/ ]*?\\w\.png\\)\\]" "!\\1!")
    )
#+end_src

** org roam
#+begin_src emacs-lisp
  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :after org
  ;;   :custom
  ;;   (org-roam-directory (file-truename wiki-directory))
  ;;   (org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory))
  ;;   (org-roam-completion-everywhere nil)
  ;;   :bind (("C-c n f" . org-roam-node-find)
  ;;          ("C-c n g" . org-roam-graph)
  ;;          ("C-c n i" . org-roam-node-insert)
  ;;          ("C-c n c" . org-roam-capture)
  ;;          ("C-c n l" . org-roam-buffer-toggle)
  ;;          ;; dailies
  ;;          ("C-c n j" . org-roam-dailies-capture-today)
  ;;          )
  ;;   :config
  ;;   (org-roam-setup)
  ;;   )										;
#+end_src

* window
** ace window
when move other window, possible choose by number when window count is more than 2
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("C-c w o" . ace-window))
    :init
    (progn
      ;; (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      )
    )
#+end_src
** winner
undo, redo window layout.
#+begin_src emacs-lisp
  (use-package winner
    :ensure t
    :config
    (winner-mode t)
    )
#+end_src
** windmove
#+begin_src emacs-lisp
  (use-package windmove
    :bind (("C-c w h" . windmove-left)
           ("C-c w j" . windmove-down)
           ("C-c w k" . windmove-up)
           ("C-c w l" . windmove-right)
           ("C-c w s h" . windmove-swap-states-left)
           ("C-c w s j" . windmove-swap-states-down)
           ("C-c w s k" . windmove-swap-states-up)
           ("C-c w s l" . windmove-swap-states-right)
           ))
#+end_src

* ivy stuff
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-c C-r". ivy-resume))
    :config
    (ivy-mode 1)
    ;; (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    )

  (use-package counsel
    :ensure t
    :config
    (counsel-mode t)
    )

  (use-package swiper
    :ensure try
    :bind (("C-c s s s" . swiper)
           ("C-c s s a" . swiper-thing-at-point)
           ("C-c s s e s" . swiper-all)
           ("C-c s s e a" . swiper-all-thing-at-point)
           )
    :config
    (ivy-mode 1)
    ;; (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )

  (use-package ivy-hydra
    :ensure t)

  (use-package ivy-xref
    :ensure t
    :init
    (when (>= emacs-major-version 27)
      (setq xref-show-definitions-function #'ivy-xref-show-defs))
    (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
    )
#+end_src

* move
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-c j j" . avy-goto-char)
           ("C-c j l" . avy-goto-line))
    )
#+end_src

* theme
** solarize dark
#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    ;; (load-theme 'solarized-dark t)
    )
#+end_src
** spacemacs
#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t))
#+end_src

* edit
** iedit
possible multi edit
#+begin_src emacs-lisp

  (use-package iedit
    :ensure t
    :config
    )

#+end_src
** possible edit in buffer
#+begin_src emacs-lisp

  (use-package wgrep
    :ensure t
    :config
    )

#+end_src
** browse kill ring
#+begin_src emacs-lisp

  (use-package browse-kill-ring
    :ensure t
    :bind (("C-c o k" . browse-kill-ring))
    :config
    )

#+end_src
** copyit
#+begin_src emacs-lisp
  (use-package copyit
    :ensure t)
#+end_src
* version control
** magit
#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :bind (("C-c p m" . magit-status))
    )

#+end_src
** p4
#+begin_src emacs-lisp

  (use-package p4
    :ensure t
    :config
    (p4-update-global-key-prefix 'p4-global-key-prefix (kbd "C-c p 4"))
    )

#+end_src
* manage 
** nproject
#+begin_src emacs-lisp

  (use-package projectile
    :ensure t
    :bind-keymap ("C-c p p" . projectile-command-map)
    :config
    (projectile-mode +1))

#+end_src

* file
** recent file
#+begin_src emacs-lisp
  (use-package recentf
    :ensure t
    :config
    (recentf-mode 1)
    )
#+end_src
** ini file
#+begin_src emacs-lisp

  (use-package ini-mode
    :ensure t
    )

#+end_src
** plantuml
#+begin_src emacs-lisp

  (use-package plantuml-mode
    :ensure t
    :bind (:map plantuml-mode-map
                ("C-M-i" . plantuml-complete-symbol))
    :config
    (setq plantuml-jar-path 
          (if (file-directory-p "~/rc/.emacs.d")
              (expand-file-name "~/rc/.emacs.d/plantuml.jar")
            (expand-file-name "~/.emacs.d/plantuml.jar")))
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-indent-level 4)
    )

#+end_src
** reveal
#+begin_src emacs-lisp

  ;; git clone https://github.com/hakimel/reveal.js ~/reveal.js
  (when (and (not (file-directory-p "~/reveal.js"))
             (executable-find "git"))
    (shell-command-to-string "cd ~ && git clone https://github.com/hakimel/reveal.js reveal.js")
    )

#+end_src

* search
** ripgrep
#+begin_src emacs-lisp

  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings (kbd "C-c s r r"))
    )

#+end_src
** everything search
#+begin_src emacs-lisp
  ;; https://www.voidtools.com/ko-kr/downloads/
  (when (eq system-type 'windows-nt)
    (setq everything-cmd "C:\\Program Files (x86)\\Everything\\es.exe")
    (setq everything-ffap-integration nil)
    (global-set-key (kbd "C-c o e") 'everything)
    (require 'everything)
    )
#+end_src

* completion

** auto completion
dead.
https://www.reddit.com/r/emacs/comments/o7aktl/autocomplete_vs_companymode_in_2021/
#+begin_src emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :bind (("C-c c C-M-i" . auto-complete))
  ;;   :init
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode nil)

  ;;     ;; set moving candidate hotkey
  ;;     (setq ac-use-menu-map t)
  ;;     (define-key ac-menu-map "\C-n" 'ac-next)
  ;;     (define-key ac-menu-map "\C-p" 'ac-previous)
  ;;     )
  ;;   )
#+end_src

** TODO Company vs Corfu

** lsp
#+begin_src emacs-lisp
  ;; language server protocol
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    )

  (defun my/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)

    :hook (lsp-mode . my/lsp-mode-setup)
    )
#+end_src

*** lsp-ui-mode
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-position'bottom)

    (setq lsp-ui-sideline-enable nil)
    (setq lsp-ui-sideline-show-hover nil)
    )
#+end_src

*** lsp-treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :after lsp
    )
#+end_src

*** lsp-ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t)
#+end_src

** yasnippet
#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :ensure t)

#+end_src

* selection
** region
*** expand region
#+begin_src emacs-lisp

  (use-package expand-region
    :ensure t
    :bind (("C-@" . er/expand-region))
    )

#+end_src
** surround
#+begin_src emacs-lisp

  (use-package emacs-surround
    :quelpa ((emacs-surround :fetcher github :repo "ganmacs/emacs-surround"))
    :config
    (global-set-key (kbd "C-c e e") 'emacs-surround)
    (add-to-list 'emacs-surround-alist '("~" . ("~" . "~")))
    (add-to-list 'emacs-surround-alist '("=" . ("=" . "=")))
    (add-to-list 'emacs-surround-alist '("`" . ("`" . "`")))
    (add-to-list 'emacs-surround-alist '("<" . ("<" . ">")))
    (add-to-list 'emacs-surround-alist '("(" . ("(" . ")")))
    (add-to-list 'emacs-surround-alist '("{" . ("{" . "}")))
    )

#+end_src

* undo
** undo tree
#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :config
    ;; (global-undo-tree-mode t)

    ;; example title: EmacsConfig [1/4] | configuration.org
    (defun my-title-bar-format()
      (let* ((current-slot (eyebrowse--get 'current-slot))
             (window-configs (eyebrowse--get 'window-configs))
             (window-config (assoc current-slot window-configs))
             (window-config-name (nth 2 window-config))
             (num-slots (length window-configs)))
        (concat window-config-name " [" (number-to-string current-slot)
                "/" (number-to-string num-slots) "] | " "%b")))
    (if (display-graphic-p)
        (progn
          (setq frame-title-format
                '(:eval (my-title-bar-format)))))
    )

#+end_src

* programming
** json mode
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    )
#+end_src
** python
#+begin_src emacs-lisp
  ;; this is something is wrong. when opened interpreter, cannot use find-file in python file.
  ;; (use-package python-mode
  ;;   :ensure t
  ;;   :hook (python-mode . lsp-deferred)
  ;;   ;; :custom
  ;;   ;; Note: Set these if Python 3 is called "python3" on your system!
  ;;   ;; (python-shell-interpreter "python3")
  ;;   )

  (use-package python
    :ensure t
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (setq python-indent-offset 4)
    )

  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1))
#+end_src
** lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :custom
    (lua-indent-level 4)
    )
#+end_src
** cpp
#+begin_src emacs-lisp
  (use-package cpp
    :config
    (setq c-default-style "linux"
          c-basic-offset 4))
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
    (setq flycheck-flake8-maximum-line-length 124)
    )
#+end_src
* file extentsion
** glsl
OpenGL Shading Language
#+begin_src emacs-lisp
  (use-package glsl-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.fx\\'" . glsl-mode))
    (add-to-list 'auto-mode-alist '("\\.fxh\\'" . glsl-mode))
    )
#+end_src

* help
** helpful
#+begin_src emacs-lisp

  (use-package helpful
    :ensure t
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key))
    :config
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c h a") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)

    ;; Look up *C*ommands.
    ;;
    ;; By default, C-h C is bound to describe `describe-coding-system'. I
    ;; don't find this very useful, but it's frequently useful to only
    ;; look at interactive functions.
    (global-set-key (kbd "C-h C") #'helpful-command)

    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable)
    )

#+end_src
* translate
** google
#+begin_src emacs-lisp
  (use-package google-translate
    :ensure t
    :bind (("C-c t t a" . google-translate-at-point)
           ("C-c t t q" . google-translate-query-translate)
           ("C-c t t t" . google-translate-smooth-translate))
    :config
    (require 'google-translate-smooth-ui)
    )
  (setq google-translate-translation-directions-alist '(("en" . "ko")
                                                        ("ko" . "en")))
#+end_src
* server
** emacs server
possible run emacsclient.exe to attach existed emacs client.
#+begin_src emacs-lisp
  (require 'server)
  (server-start)
#+end_src
** edit server
#+begin_src emacs-lisp

  (use-package edit-server
    :ensure t
    :config
    (setq edit-server-url-major-mode-alist
          '(("github\\.com" . markdown-mode)))
    (edit-server-start)
    )

#+end_src
* bookmark
#+begin_src emacs-lisp

  (use-package bm
    :ensure t
    :bind(("C-c m m t" . bm-toggle)
          ("C-c m m n" . bm-next)
          ("C-c m m p" . bm-previous)
          ("C-c m m s a" . bm-show-all)
          ("C-c m m s s" . bm-show))
    )

#+end_src
* note
** deft
#+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :after org
    :bind (("C-c n d d" . deft)
           ("C-c n d f" . deft-find-file))
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory wiki-directory)
    )
#+end_src
* default text scale
#+begin_src emacs-lisp
  (use-package default-text-scale
    :ensure t
    :custom
    (default-text-scale-mode t))
#+end_src

